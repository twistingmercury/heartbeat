// Code generated by go-enum DO NOT EDIT.
// Version: 0.5.0
// Revision: bc24b100a9e3ef3c4271209e99c6ac57597446f3
// Build Date: 2022-08-03T22:36:20Z
// Built By: goreleaser

package heartbeat

import (
	"fmt"
)

const (
	// StatusNotSet is a Status of type NotSet.
	StatusNotSet Status = iota
	// StatusOK is a Status of type OK.
	StatusOK
	// StatusWarning is a Status of type Warning.
	StatusWarning
	// StatusCritical is a Status of type Critical.
	StatusCritical
)

const _StatusName = "NotSetOKWarningCritical"

var _StatusMap = map[Status]string{
	StatusNotSet:   _StatusName[0:6],
	StatusOK:       _StatusName[6:8],
	StatusWarning:  _StatusName[8:15],
	StatusCritical: _StatusName[15:23],
}

// String implements the Stringer interface.
func (x Status) String() string {
	if str, ok := _StatusMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Status(%d)", x)
}

var _StatusValue = map[string]Status{
	_StatusName[0:6]:   StatusNotSet,
	_StatusName[6:8]:   StatusOK,
	_StatusName[8:15]:  StatusWarning,
	_StatusName[15:23]: StatusCritical,
}

// ParseStatus attempts to convert a string to a Status.
func ParseStatus(name string) (Status, error) {
	if x, ok := _StatusValue[name]; ok {
		return x, nil
	}
	return Status(0), fmt.Errorf("%s is not a valid Status", name)
}

// MarshalText implements the text marshaller method.
func (x Status) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Status) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseStatus(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
